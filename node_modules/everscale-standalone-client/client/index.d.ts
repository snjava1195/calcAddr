import type * as ever from 'everscale-inpage-provider';
import type * as nt from 'nekoton-wasm';
import { SafeEventEmitter } from './utils';
import { ConnectionProperties } from './ConnectionController';
import { Keystore } from './keystore';
import { Clock } from './clock';
export { NETWORK_PRESETS, ConnectionData, ConnectionProperties } from './ConnectionController';
export { GqlSocketParams, JrpcSocketParams, ConnectionError, checkConnection } from './ConnectionController';
export { Keystore, Signer, SimpleKeystore } from './keystore';
export { Clock } from './clock';
export type { Ed25519KeyPair } from 'nekoton-wasm';
/**
 * Standalone provider which is used as a fallback when browser extension is not installed
 *
 * @category Client
 */
export declare type ClientProperties = {
    /**
     * Connection properties or network preset name
     */
    connection: ConnectionProperties;
    /**
     * Keystore which will be used for all methods with `accountInteraction`
     */
    keystore?: Keystore;
    /**
     * Clock object which can be used to adjust time offset
     */
    clock?: Clock;
    /**
     * Explicit params for nekoton wasm loader
     */
    initInput?: nt.InitInput | Promise<nt.InitInput>;
};
/**
 * @category Client
 */
export declare const DEFAULT_CLIENT_PROPERTIES: ClientProperties;
/**
 * @category Client
 */
export declare const VERSION = "0.2.25";
/**
 * @category Client
 */
export declare const SUPPORTED_PERMISSIONS: ever.Permission[];
/**
 * @category Client
 */
export declare class EverscaleStandaloneClient extends SafeEventEmitter implements ever.Provider {
    private _context;
    private _handlers;
    static create(params: ClientProperties): Promise<EverscaleStandaloneClient>;
    private constructor();
    request<T extends ever.ProviderMethod>(req: ever.RawProviderRequest<T>): Promise<ever.RawProviderApiResponse<T>>;
    computeWalletAddress(workchain: number, walletType: nt.WalletContractType, publicKey: string): string;
    sendTransfer(walletType: nt.WalletContractType, publicKey: string, recipient: string, gifts: nt.Gift[]): Promise<nt.Transaction>;
}
